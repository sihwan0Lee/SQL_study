조인

2개 이상의 table에 있는 정보 중 필요한 집합에 맞게 가상의 table처럼 만들어서 결과를 보여주는 것.

INNER 조인
특정 col을 기준으로 정확히 매칭된 집합을 출력한다.

SELECT
    A.CUSTOMER_ID, A.FIRST_NAME , A.LAST_NAME, A.EMAIL, 
    B.AMOUNT, B.PAYMENT_DATE
FROM CUSTOMER A
INNER JOIN PAYMENT B
ON A.CUSTOMER_ID = B.CUSTOMER_ID
WHERE A.CUSTOMER_ID = 2;

SELECT
    A.CUSTOMER_ID, A.FIRST_NAME , A.LAST_NAME, A.EMAIL, 
    B.AMOUNT, B.PAYMENT_DATE
FROM PAYMENT B
INNER JOIN CUSTOMER_ID A
ON A.CUSTOMER_ID = B.CUSTOMER_ID
WHERE A.CUSTOMER_ID = 2;


한 명의 고객은 여러 건의 결제내역을 가질 수 있고, 하나의 걸제는 반드시 고객을 가져야만 한다.



SELECT
A.CUSTOMER_ID, A.FIRST_NAME , A.LAST_NAME, A.EMAIL
, B.AMOUNT, B.PAYMENT_DATE
, C.FIRST_NAME AS S_FIRST_NAME
, C.LAST_NAME AS S_LAST_NAME
FROM CUSTOMER A
INNER JOIN PAYMENT B
ON A.CUSTOMER_ID = B.CUSTOMER_ID 
INNER JOIN STAFF C
ON B.STAFF_ID = C.STAFF_ID;

한 명의 고객은 여러 건 결제 할수 있다.
하나의 결제는 반드시 고객이 있어야한다.
하나의 결제는 반드시 처리한 직원이 있다.
한 명의 직원은 여러건의 결제내역을 처리한다.


from 뒤에는 기준으로 삼을 table이 온다.
그래서 payment, staff table을 customer table을 기준으로 조인한다.

순서대로 custmer 기준으로 payment에 조인해서 payment에서 정보를 뽑고, 거기서 다시 staff에 조인해서 정보를 가져오는 것

SELECT
A.CUSTOMER_ID, A.FIRST_NAME , A.LAST_NAME, A.EMAIL
, B.AMOUNT, B.PAYMENT_DATE
, C.FIRST_NAME AS S_FIRST_NAME
, C.LAST_NAME AS S_LAST_NAME
FROM staff c
INNER JOIN PAYMENT B
ON B.STAFF_ID = C.STAFF_ID
INNER JOIN customer A
ON A.CUSTOMER_ID = B.CUSTOMER_ID;





OUTER 조인
특정 col을 기준으로 매칭된 집합을 출력하지만 한쪽의 집합은 모두 출력하고 다른 한쪽의 집합은 매칭되는 col의 값 만 을 출력한다.

SELECT
       A.ID    AS ID_A
     , A.FRUIT AS FRUIT_A
     , B.ID    AS ID_B
     , B.FRUIT AS FRUIT_B
FROM
    BASKET_A A
LEFT JOIN BASKET_B B
  ON A.FRUIT = B.FRUIT;

BASKET_A table과
BASKET_B table을 조인하는데 BASKET_A 를 기준집합으로 조인한다.

a기준으로 b에 조인하는 거니까 a와 a,b의 공집합

SELECT
      A.ID    AS ID_A
    , A.FRUIT AS FRUIT_A
    , B.ID    AS ID_B
    , B.FRUIT AS FRUIT_B
FROM
      BASKET_A A
LEFT JOIN BASKET_B B
  ON A.FRUIT = B.FRUIT
WHERE B.ID IS NULL;
BASKET_A table과
BASKET_B table을 조인하는데 BASKET_A를 기준집합으로 조인한다. B table이 NULL인 것만 출력한다.


SELECT
       A.ID    AS ID_A
     , A.FRUIT AS FRUIT_A
     , B.ID    AS ID_B
     , B.FRUIT AS FRUIT_B
FROM
       BASKET_A A
RIGHT JOIN BASKET_B B
  ON A.FRUIT = B.FRUIT;


BASKET_A table과
BASKET_B table을 조인하는데 BASKET_B 를 기준집합으로 조인한다.




SELF 조인
동일한 table 끼리 의 특정 col을 기준으로 매칭되는 집합을 출력한다.
같은 table의 데이터를 각각의 집합으로 분류한 후 조인한다.


SELECT
  E.FIRST_NAME || ' ' || E.LAST_NAME EMPLOYEE
, M.FIRST_NAME || ' ' || M .LAST_NAME MANAGER
FROM
     EMPLOYEE E
INNER JOIN EMPLOYEE M
ON M.EMPLOYEE_ID = E.MANAGER_ID
ORDER BY MANAGER;
---------------------------------
EMPLOYEE        MANAGER

Sau Norman	    Ava Christensen
Anna Reeves	    Ava Christensen
Salley Lester	Hassan Conner
Kelsie Hays	    Hassan Conner
Tory Goff	    Hassan Conner
Ava Christensen	Windy Hays
Hassan Conner	Windy Hays
---------------------------------
각 직원의 상위 관리자를 출력한다. 


FIRST_NAME  EMPLOYEE    FIRST_NAME  MANAGER
Sau	        Norman	    Ava	        Christensen
Anna	    Reeves	    Ava	        Christensen
Salley	    Lester	    Hassan	    Conner
Kelsie	    Hays	    Hassan	    Conner
Tory	    Goff	    Hassan	    Conner
Ava	        Christensen	Windy	    Hays
Hassan	    Conner	    Windy	    Hays

참고로 || || 를 통해 문자를 합칠수가 있다.
|| 와 || 사이에 들어 갈 것을 넣어주는 문법형식이다
아무 것도 없으면 

SQL Error [42883]: ERROR: operator does not exist: || character varying
  Hint: No operator matches the given name and argument type. You might need to add an explicit type cast.

해당 에러가 뜬다.

' ' 를 통해 col값이 아닌 값이나 띄워쓰기를 넣을수있고
col값을 넣으면 해당 col 값이 나온다.

SELECT
  E.FIRST_NAME || ' ' || E.LAST_NAME EMPLOYEE
, M.FIRST_NAME || ' ' || M .LAST_NAME MANAGER
FROM
     EMPLOYEE E
LEFT JOIN EMPLOYEE M
ON M.EMPLOYEE_ID = E.MANAGER_ID
ORDER BY MANAGER;

EMPOLYEE table과
EMPOLYEE table을 조인 EMPLOYEE_ID와 MANAGER_ID col을 조인함






FULL OUTER 조인
INNER, LEFT OUTER, RIGHT OUTER 조인 집합을 모두 출력한다.


SELECT
       A.ID ID_A
     , A.FRUIT FRUIT_A
     , B.ID ID_B
     , B.FRUIT FRUIT_B
FROM BASKET_A A
FULL OUTER JOIN BASKET_B B
      ON A.FRUIT = B.FRUIT;

BASKET_A table과
BASKET_B table을
FRUIT col 기준으로 FULL OUTER 조인한다.
(다이어그램 전체)

SELECT
       A.ID ID_A
     , A.FRUIT FRUIT_A
     , B.ID ID_B
     , B.FRUIT FRUIT_B
FROM BASKET_A A
FULL OUTER JOIN BASKET_B B
ON A.FRUIT = B.FRUIT
WHERE  A.ID IS NULL
   OR  B.ID IS NULL;

(공집합 부분만 제외)



CROSS 조인
Cartesian Product이라고도 하며 조인되는 두 table에서 곱집합을 반환한다.

NATURAL 조인
특정 table의 같은 이름을 가진 col 간의 조인집합을 출력한다.!!!